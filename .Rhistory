install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
bye()
library("swirl")
swirl()
1:20
pi:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,20, by=0.5)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
library(swirl)
swirl()
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
c("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name<- c(my_char, "Hannah")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
1
library(datasets)
data(iris)
?iris
mean(iris[,1])
str(iris)
head(iris)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
l<-with(mtcars, tapply(mpg, cyl, mean))
l[1,2]
l[1]
abs(l[1]-l[2])
?iris
head(iris)
?tapply
?factor
f<-factor(iris[5])
f<-as.factor(iris[5])
f<-iris[5]
f
f<-as.factor(f)
sort.list(f)
str(f)
r<-iris[,1]
fd<-f=="virginica"
l[fd]
r[fd]
mean(r[fd])
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
l<-with(mtcars, tapply(hp, cyl, mean))
abs(l[1]-l[3])
setwd("~/datasciencecoursera/RepData_PeerAssessment1")
activityData <- read.csv("activity.csv")
summary(activityData)
head(activityData)
a<- split(activityData, activityData$date)
lapply(a, mean("steps"))
lapply(a, colMeans(, c("steps"))
)
lapply(a, function(x) {
+ colMeans(x[, c("steps")])
+ })
lapply(a, function(x) {
+ colMeans(x[, c("steps")], na.rm = TRUE)
+ })
lapply(a, function(x) {
+ colMeans(x[, c("steps")], na.rm = TRUE)
+ }
lapply(a, function(x)
+ colMeans(x[, c("steps")], na.rm = TRUE)
+
)
lapply(a, function(x)
+ colMeans(x[, c("steps")], na.rm = TRUE)
+ )
lapply(a, function(x) {colMeans(x[, c("steps")], na.rm = TRUE)})
lapply(a, function(x) {colMeans(x[, c("steps","interval")], na.rm = TRUE)})
lapply(a, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
sapply(a, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
sum<-sapply(a, function(x) {sum(x[, c("steps")], na.rm = TRUE)})
mean(sum, na.rm = TRUE)
hist(sum
)
hist(sum, c(10))
hist(sum, c(100))
hist(sum, c(100),freq = FALSE)
hist(sum, c(100),freq = TRUE)
hist(sum, c(100),freq = FALSE)
hist(sum, c(100),freq = TRUE)
hist(sum, c(10))
b<- split(activityData,activityData$interval)
pattern <-sapply(a, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
plot(pattern)
plot(pattern, type = "1")
plot(pattern, type = "l")
max(pattern)
max(pattern,rm.na = TRUE)
max(pattern,na.rm =  = TRUE)
max(pattern,na.rm = TRUE)
summary(pattern)
b[,"steps"= max(pattern,na.rm = TRUE)]
head(pattern)
head(sum)
head(b)
summary(b)
str(b)
intevals<-unique(activityData$interval)
pattern <- c(intevals,sapply(a, function(x) {mean(x[, c("steps")], na.rm = TRUE)}))
pattern <- rbind(intevals,sapply(a, function(x) {mean(x[, c("steps")], na.rm = TRUE)}))
pattern <- sapply(a, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
pattern <- sapply(b, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
max(pattern,na.rm = TRUE)
plot(pattern)
head(pattern)
pattern[pattern = max(pattern,na.rm = TRUE)]
plot(pattern, type = "l")
pattern[order(pattern]
pattern[order(pattern)]
pattern[rev(order(pattern))]
head(pattern[rev(order(pattern))])
d<-data.frame(interval,pattern)
d<-data.frame(intervals,pattern)
d<-data.frame(intevals,pattern)
max(d$pattern)
d[d$pattern == max(d$pattern),]
length(activityData[is.na(activityData$steps),])
activityData[is.na(activityData$steps),]
nrow(activityData[is.na(activityData$steps),])
b[1]
completeActivityData<-data,frame()
completeActivityData<-data.frame()
summary(b)
str(b)
complteb<-list()
completeb<-list()
completeb <- sapply(b, function(x) {completeb[is.na(completeb$steps)<-mean(x[, c("steps")], na.rm = TRUE)})
completeb <- sapply(b, function(x) {completeb[is.na(completeb$steps),]<-mean(x[, c("steps")], na.rm = TRUE)})
completeb <- sapply(b, function(x) {completeb[is.na(b$steps),]<-mean(x[, c("steps")], na.rm = TRUE)})
completeb <-b
completeb <- sapply(b, function(x) {completeb[is.na(completeb$steps),]<-mean(x[, c("steps")], na.rm = TRUE)})
is.na(completeb)
completeb[is.na(completeb)]
completeb[is.na(completeb),]
completeb[[is.na(completeb)]]
completeb <- sapply(b, function(x) {x[is.na("steps"),]<-mean(x[, c("steps")], na.rm = TRUE)})
x<-unsplit(completeb,intevals)
head(x)
completeb <-b
completeActivityData<-activityData
completeActivityData[is.na(completeActivityData$steps),]<-d[completeActivityData$interval==d$intevals]
completeActivityData[is.na(completeActivityData$steps),]<-d[completeActivityData$interval==d$intevals,]
nrow(completeActivityData[is.na(completeActivityData$steps),])
completeActivityData<-activityData
completeActivityData[is.na(completeActivityData$steps),]
completeActivityData$steps <- ifelse(is.na(completeActivityData$steps),
d$pattern[match(completeActivityData$interval, d$intevals)], completeActivityData$steps)
completeActivityData[is.na(completeActivityData$steps),]
summary(completeActivityData)
View(completeActivityData)
View(activityData)
nrow(completeActivityData[is.na(completeActivityData$steps),])
completeActivityData<-activityData
completeActivityData$steps <- ifelse(is.na(completeActivityData$steps), d$pattern[match(completeActivityData$interval, d$intevals)], completeActivityData$steps)
nrow(completeActivityData[is.na(completeActivityData$steps),])
nrow(activityData[is.na(activityData$steps),])
completeActivityData$weekday<-ifelse(weekdays(completeActivityData$date), TRUE, FALSE)
weekdays(completeActivityData$date)
dates<- completeActivityData$date
weekdays(dates)
head(weekdays(dates[1]))
format.Date(dates)
head(weekend(format.Date(dates)))
head(weekday(format.Date(dates)))
head(weekdays(format.Date(dates)))
head(weekdays(as.Date(dates)))
completeActivityData$weekday<-weekdays(as.Date(dates))
completeActivityData$weekday<-weekdays(as.Date(completeActivityData$date))
completeActivityData$weekday<-ifelse(completeActivityData$weekday == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), True, d$interval)], completeActivityData$steps)
completeActivityData$weekday<-ifelse(completeActivityData$weekday == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), TRUE, FALSE)
completeActivityData$weekday<-weekdays(as.Date(completeActivityData$date))
completeActivityData$weekday<-ifelse(completeActivityData$weekday %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), TRUE, FALSE)
head(completeActivityData)
install.packages("lattice")
library(lattice)
?lattice-pakage
?lattice-package
?lattice
e<- split(completeActivityData,c(completeActivityData$weekday,completeActivityData$interval))
head(e)
summary(e)
str(e)
e<-split(completeActivityData, completeActivityData[,c('weekday','interval')])
str(e)
weekdaypattern <- sapply(e, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
weekdaydata<-completeActivityData[completeActivityData$weekday,]
weekenddata<-completeActivityData[!completeActivityData$weekday,]
weekdaysplit<- split(weekdaydata,interval)
weekdaysplit<- split(weekdaydata,weekday$interval)
interval<-unique(activityData$interval)
weekdaysplit<- split(weekdaydata,weekdaydata$interval)
weekendsplit<- split(weekenddata,weekenddata$interval)
weekdaypattern <- sapply(weekdaydata, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
weekdaypattern <- numeric()
weekdaypattern <- sapply(weekdaydata, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
weekdaypattern <- sapply(weekdaysplit, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
weekendpattern <- sapply(weekendsplit, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
ctivityData <- read.csv("activity.csv")
activityData <- read.csv("activity.csv")
activityData$date <- as.Date(activityData$date)
completeActivityData<-activityData
completeActivityData$steps <- ifelse(is.na(completeActivityData$steps), d$pattern[match(completeActivityData$interval, d$interval)], completeActivityData$steps)
d<-data.frame(interval,pattern)
interval<-unique(activityData$interval)
b<- split(activityData,interval)
pattern <- sapply(b, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
d<-data.frame(interval,pattern)
completeActivityData<-activityData
completeActivityData$steps <- ifelse(is.na(completeActivityData$steps), d$pattern[match(completeActivityData$interval, d$interval)], completeActivityData$steps)
completeActivityData$weekday<-weekdays(completeActivityData$date)
completeActivityData$weekday<-ifelse(completeActivityData$weekday %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), TRUE, FALSE)
weekdaydata<-completeActivityData[completeActivityData$weekday,]
weekenddata<-completeActivityData[!completeActivityData$weekday,]
weekdaysplit<- split(weekdaydata,weekdaydata$interval)
weekendsplit<- split(weekenddata,weekenddata$interval)
weekdaypattern <- sapply(weekdaysplit, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
weekendpattern <- sapply(weekendsplit, function(x) {mean(x[, c("steps")], na.rm = TRUE)})
plot( interval, weekdaypattern, type="l", col="red", main ="Average daily activity pattern, weekday = red, weekend = green", xlab ="Interval",ylab = "Average number of steps")
lines( interval, weekendpattern, type="l", col="green",xlab ="",ylab = "" )
plot( interval, weekdaypattern, type="l", col="red", main ="Average daily activity pattern, weekday = red, weekend = green", xlab ="Interval",ylab = "Average number of steps")
par(nfrow)
par(mfrow)
par(mfrow=c(1,2))
plot( interval, weekdaypattern, type="l", col="red", main ="Average daily activity pattern, weekday = red, weekend = green", xlab ="Interval",ylab = "Average number of steps")
plot( interval, weekdaypattern, type="l", col="red", main ="Average daily activity pattern, weekday = red, weekend = green", xlab ="Interval",ylab = "Average number of steps")
plot( interval, weekendpattern, type="l", col="green",xlab ="",ylab = "" )
setwd("~/datasciencecoursera/getandcleandataproject")
library(httr)
myapp <- oauth_app("github",
key = "dc339490fbf8b052078d",
secret = "59f6c10ec46ce6a0458a3955cb80f28960a855c5")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "dc339490fbf8b052078d",
secret = "59f6c10ec46ce6a0458a3955cb80f28960a855c5")
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("new application",
key = "dc339490fbf8b052078d",
secret = "59f6c10ec46ce6a0458a3955cb80f28960a855c5")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
jsonData<-fromJSON(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httpuv)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httr)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
data<-toJSON(req)
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
temp
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
list.files
list.files()
list.files("\\UCI HAR Dataset)
list.files(".\\UCI HAR Dataset")
list.files(".\\UCI HAR Dataset\\test")
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
list.files(".\\UCI HAR Dataset", recursive = TRUE)
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
names(X_test)
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
source('~/datasciencecoursera/getandcleandataproject/run_analysis.R')
